# -*- coding: utf-8 -*-
"""Busca de Serial e Alteração de colunas no Excel

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yOUY2zoPdEycbc2Ff8qxSjvweTyXn50j

0. Inserir planilha com extensão .xltx (PLanilha Office Open XML)
1. Buscar os Seriais Alvos
2. Fazer alterações nos campos alvos
3. Salvar a mesma planilha com as alterações feitas.
"""

#Bibliotecas:
from google.colab import files
import pandas as pd

# Carregamento da planilha em EXCEL:

# Solicitar upload do arquivo Excel
uploaded = files.upload()

# Pegar o nome do arquivo do dicionário 'uploaded'
file_name = next(iter(uploaded))

# Carregar o arquivo Excel em um DataFrame do Pandas
df = pd.read_excel(file_name)

# Mostrar as primeiras linhas para verificar se o carregamento ocorreu corretamente
df.head()

# Passo 2: Realizar a busca e as alterações:



# Lista de números de série que você deseja buscar
#numeros_serie_procurar = ['12345', '67890', '54321']
numeros_serie_procurar = []

qtdInsertSerial = int(input("Quantos Seriais que deseja pesquisar: "))

cont = 0
while cont < qtdInsertSerial:
  numeros_serie_procurar.append(input(f"Digite o número de série - {qtdInsertSerial}: "))
  qtdInsertSerial -= 1



# Filtrar as linhas com base nos números de série
filtro = df['NumeroSerie'].isin(numeros_serie_procurar)
resultados = df[filtro]

# Mostrar os resultados encontrados
print("Resultados encontrados:")
print(resultados)

# Passo 3: Fazer as alterações nos dados:

novas_informacoes = {
    'Apelido': 'PENITENCIARIA REGIONAL DO AGRESTE - ANTIGO CRA',
    'Endereco': 'Fazenda Nascimento, S/N',
    'Cidade': 'CANHOTINHO',
    'CEP': '55.420-000',
    'CNPJInstalacao': '06.290.858/0014-39'
}

for coluna, valores in novas_informacoes.items():
    resultados.loc[filtro, coluna] = valores

# Mostrar o DataFrame atualizado
print(f"Sérial Pesquisados: {numeros_serie_procurar}")
print("\nDataFrame atualizado:")
print(resultados)

# Passo 4: Juntar as mundaças na planilha principal - MArge de Dataframes:

# Definindo 'id' como índice para usar .update(), referÊncia para o update
df.set_index('ItemDeContrato', inplace=True)
resultados.set_index('ItemDeContrato', inplace=True)

# Atualizando DF com os dados de resultados
df.update(resultados)

# Resetando o índice, se necessário
df.reset_index(inplace=True)

print(df)

# Passo 5: Salvando o DataFrame final em um arquivo Excel
nome_arquivo = 'equipamentoEditadosUnidades.xlsx'
df.to_excel(nome_arquivo, index=False)

print(f'DataFrame final salvo em {nome_arquivo}')